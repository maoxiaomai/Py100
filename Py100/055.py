# coding: utf-8

# 学习使用按位取反~。 x的按位翻转是-(x+1) . 注意,按位运算符是单目运算符.

# 计算机用补码表示负数

########## 补码：  ##### (按位取反再加1）
# 1）非负数：非负数的补码是原码本身；
# 2）负数：负数的补码，将其对应正数二进制表示所有位取反（包括符号位，0变1，1变0）后加1


########## 取反：  #####
# e.g. 求~4
# 4 的原码：0000 0100
# 按位取反：1111 1011
# 符号位是1，∴4取反得到的是负数
# 因为计算机中，负数是用补码存储的
# 所以，问题转化位，求负数1111 1011的补码（按位取反加1）
# 按位取反：0000 0100
# 加1： 0000 0101
# 加上符号; -0000 0101 = -5

# e.g. 求负数的反码。~ -4
# -4：在计算机中用补码表示的。求负数补码，其对应正数4（0000 0100）取反加1，1111 1011 + 1 = 1111 0100
# 1111 1100取反：0000 0011
# 所以-4的反码为3


if __name__ == '__main__':
    a = 234
    b = ~a
    print('The a\'s 1 complement is %d' % b)
    a = ~a
    print ('The a\'s 2 complement is %d' % a)


