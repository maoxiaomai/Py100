# coding: utf-8

# 题目：取一个整数a从右端开始的4〜7位。

# 程序分析：可以这样考虑：
# (1)先使a右移4位。 => 右端开始的4~7位变成了最低4位
# (2)设置一个低4位全为1,其余全为0的数。可用~(~0<<4) => 0000 1111
# (3)将上面二者进行&运算。 =》 即保留了最低4位（原4~7位），其余位都变成了0。


# 左移<<  右移>>
# https://blog.csdn.net/will5451/article/details/53405803
# << 左移动运算符：运算数的各二进位全部左移若干位，由 << 右边的数字指定了移动的位数，高位丢弃，低位补0。
# >> 右移动运算符：把">>"左边的运算数的各二进位全部右移若干位，>> 右边的数字指定了移动的位数


if __name__ == "__main__":
    num = int(input("enter a number: "))
    a = num >> 4
    print(bin(a).replace('0b',''))
    b = 15 # 0000 1111
    c = a & b
    print(c)
    print("二进制：", bin(c).replace('0b', ''))
















